<html>
  <head>
  	<link href="/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	<script type="text/javascript" src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>
  <body>
  	<div class="container-fluid">
  		<div class="row">
  			<div class="col-md-12">
	  			<p>menu</p>
	  		</div>
  		</div>
  		<div class="row">
  			<div class="col-md-6">
	  			 <div id="parent_chart" style="width: 75%; height: 50%;"></div>
	  		</div>
 			<div class="col-md-6">
	  			<div id="child_chart" style="width: 75%; height: 50%;"></div>
	  		</div>
  		</div>
  		<div class="row">
  			<div class="col-md-4">
	  			<div id="applist" style="width: 75%; height: 50%;"></div>
	  		</div>
 			<div class="col-md-8">
	  			<div id="app_chart" style="width: 100%; 50%;"></div>
	  		</div>
  		</div>
	</div>
	
  </body>
  <script>

var appChartTimeline;
var selectedGrade;
var selectedGradeDesc;
var selectedDate = 20160930;
var scoreSummary;

var rawGradeMetaData = 
[
['red'],
['grey'],
['orange'],
['yellow'],
['green'],
['green']
]

var selectedColor;


google.charts.load('current', {'packages':['corechart','table','annotationchart']});
google.charts.setOnLoadCallback(drawSeriesChart);

var appScoreOptions = {
        title: '80 Production Applications',
        hAxis: {title: 'Grades',
        				baseline: 0,
    						ticks: [0, 1, 2, 3, 4, 5],
						    viewWindow: { min: 0, max: 6 },
						    textPosition: 'none'
        },
        vAxis: {title: 'Number of Apps',
        				baseline: 0,
    						ticks: [0, 20, 40, 60, 80, 100],
						    viewWindow: { min: 0, max: 100 }
        },
        bubble: {textStyle: {fontSize: 11,auraColor: 'none'}},
        animation:
           {
               "startup": true,
               duration: 2000,
               easing: 'out'
           },
       colors: [rawGradeMetaData[0].toString(),rawGradeMetaData[1].toString(),rawGradeMetaData[2].toString(),rawGradeMetaData[3].toString(),rawGradeMetaData[4].toString(),rawGradeMetaData[5].toString()]    
};

function sortByKey(array, key) {
    return array.sort(function(a, b) {
        var x = a[key]; var y = b[key];
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
}


function drawSeriesChart() {
  
  	  $.get( "/appscore/"+selectedDate, function( resp ) {
  			scoreSummary = resp;
  			
  			var dataTable = new google.visualization.DataTable();
  			dataTable.addColumn('string', 'ID');
  			dataTable.addColumn('number', 'Score');
			dataTable.addColumn('number', '#Apps');
			dataTable.addColumn('string', 'Score Description');
			dataTable.addColumn('number', 'Size Factor');
			
			var rowData = [];
			for(var i=0; i < scoreSummary.length; ++i) {
				var row = [];
			    var rec = scoreSummary[i];
			    row.push("ID - "+rec.score); 
			    row.push(rec.score); 
			    row.push(rec.count);
				row.push(rec.description);
			    row.push(1);
			    rowData.push(row);
			}
			
			dataTable.addRows(rowData);
			
      		var chart = new google.visualization.BubbleChart(document.getElementById('parent_chart'));
      		
      		function selectHandler() {
			    var selectedItem = chart.getSelection()[0];
			    if (selectedItem) {
			    	selectedpos = selectedItem.row;
			    	selectedGrade = scoreSummary[selectedpos];
			    	selectedGradeDesc = selectedGrade.description;
			    	selectedColor = rawGradeMetaData[selectedpos].toString();
			    	drawGradeChart(selectedGrade,selectedGradeDesc);
		        	renderAppList(selectedGrade,selectedGradeDesc);
		        	if(appChartTimeline){
		        		appChartTimeline.clearChart();
		        	}
		        }
			}
      		google.visualization.events.addListener(chart, 'select', selectHandler);
      		chart.draw(dataTable, appScoreOptions);
	  });
}

function drawGradeChart(selectedGrade,selectedGradeDesc){

	$.get( "/appscorebydate/"+selectedGrade.score+"/"+selectedDate, function( resp ) {	
		var scoreData = resp;	
		scoreData = sortByKey(scoreData, '_id');
		
		var dataTable = new google.visualization.DataTable();
		dataTable.addColumn('date', 'Date');
		dataTable.addColumn('number', 'Number of Applications');

		var rowData = [];
		for(var i=0; i < scoreData.length; ++i) {
			var row = [];
		    var rec = scoreData[i];
		    var dateRec = new Date(rec._id);
		    row.push(new Date(dateRec.getYear()+'-'+(dateRec.getMonth()+1)+'-'+dateRec.getDate()));
		    row.push(rec.count);
		    rowData.push(row);
		}

		dataTable.addRows(rowData);

		var options = {
			title: selectedGradeDesc,
			hAxis: {
		        format: 'MM-dd',
		        gridlines: {count: 90}
		    },
			vAxis: {title: 'Number of Apps',minValue: 0},
			animation: {
			  duration: 1000,
			  easing: 'out',
			  startup: true
			},
			colors :[selectedColor]
		};  
		var chart = new google.visualization.LineChart(document.getElementById('child_chart'));
		chart.draw(dataTable, options);
	});
}
   
function renderAppList(selectedScore,selectedGradeDesc){
   
	$.get( "/applistbyscorebydate/"+selectedScore.score+"/"+selectedDate, function( resp ) {
		var appData = resp;
		
		var data = new google.visualization.DataTable();
      	data.addColumn('string', 'Application Name');
      	data.addColumn('number', 'Incident Count');
		
		var rowData = [];
		for(var i=0; i < appData.length; ++i) {
			var row = [];
		    var rec = appData[i];
		    row.push(rec.appname);
		    row.push(rec.incidents);
		    rowData.push(row);
		}
	  
	    data.addRows(rowData);
      
    	var table = new google.visualization.Table(document.getElementById('applist'));

		  function tableSelectHandler() {
		    var selectedItem = table.getSelection()[0];
		    if (selectedItem) {
		    	selectedApp = selectedItem.row;
		    	drawAppTimeline(appData[selectedApp],selectedGradeDesc);
		    }
		  }
		  google.visualization.events.addListener(table, 'select', tableSelectHandler);
		  table.draw(data, {showRowNumber: false});
    });	
} 

function drawAppTimeline(appRec,selectedGradeDesc) {
	$.get( "/apptimeline/"+appRec.appid+"/"+selectedDate, function( resp ) {
	
		var appTimeline = resp;
	
        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Date');
        data.addColumn('number', 'Score');
        data.addColumn({type: 'string', role: 'annotation'});
    	data.addColumn({type: 'string', role: 'annotationText'});
    	
    	var rowData = [];
		for(var i=0; i < appTimeline.length; ++i) {
			var row = [];
		    var rec = appTimeline[i];
		    var dateRec = new Date(rec.time);
		    row.push(new Date(dateRec.getYear()+'-'+(dateRec.getMonth()+1)+'-'+dateRec.getDate()));
		    
		    row.push(rec.incidents);
		    row.push(""+rec.score);
		    row.push("Critical Incidents :"+rec.incidents);
		    rowData.push(row);
		}
    	
        data.addRows(rowData);

        appChartTimeline = new google.visualization.LineChart(document.getElementById('app_chart'));

        var options = {
	        title: appRec.appname +" - "+selectedGradeDesc,
	        hAxis: {title: '',
	        format: 'MM-dd'},
	        vAxis: {title: 'Number of Incidents'},
	        animation: {
	          duration: 1000,
	          easing: 'out',
	          startup: true
	      	},
            displayAnnotations: false,
          	colors :[selectedColor]
        };
        appChartTimeline.draw(data, options);
	});
} 
   

  
  </script>
</html>